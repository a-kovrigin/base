<?php

/**
 * @file
 * Main file for Base theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_region(&$variables) {
  $variables['region'] = Html::cleanCssIdentifier($variables['region']);
}

/**
 * Implements hook_preprocess_page().
 */
function base_preprocess_page(&$variables) {
  $layout_attributes = new Attribute();
  $layout_attributes->addClass('main-layout');

  if (!empty($variables['page']['sidebar'])) {
    $layout_attributes->addClass('main-layout--with-sidebar');
  }

  $variables['layout_attributes'] = $layout_attributes;
}

/**
 * Implements hook_preprocess_block().
 */
function base_preprocess_block(&$variables) {
  if (!isset($variables['elements']['#id'])) {
    return;
  }

  $block_class = Html::cleanCssIdentifier($variables['elements']['#id']);
  $variables['attributes']['class'][] = $block_class;
  $variables['class'] = $block_class;
  $variables['title_attributes']['class'][] = implode('__', [$block_class, 'heading']);
  $variables['title_attributes']['class'][] = 'heading';

  // Block with inner container.
  $block_id = $variables['elements']['#id'];
  $has_container = FALSE;
  $wrapped_blocks = [
    'breadcrumbs',
    'page_title',
    'local_tasks',
  ];

  if (in_array($block_id, $wrapped_blocks)) {
    $has_container = TRUE;
  }

  $block = Block::load($block_id);
  $third_party_settings = $block->getThirdPartySettings('block_layout');
  if (!empty($third_party_settings)) {
    if (isset($third_party_settings['wrapped'])) {
      $has_container = $third_party_settings['wrapped'];
    }
  }

  $variables['wrapped'] = $has_container;

  // Modals region.
  $block_region = $block->getRegion();
  if ($block_region == 'modals') {
    $variables['#attached']['library'][] = 'base/modals';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    /** @var \Drupal\block_content\Entity\BlockContent $block */
    $block = $variables['elements']['content']['#block_content'];
    $bundle = $block->bundle();
    array_splice($suggestions, 1, 0, 'block__' . $bundle);
  }

  if (isset($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    $suggestions[] = 'block__region__' . $block->getRegion();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements template_preprocess_field().
 */
function base_preprocess_field(&$variables) {
  $field_name = $variables['field_name'];
  $field_name_formatted = str_replace('field_', '', $field_name) . '-field';
  $variables['field_name'] = Html::cleanCssIdentifier($field_name_formatted);

  switch ($field_name) {
    // Content paragraphs field.
    case 'field_content_paragraphs':
      $variables['#attached']['library'][] = 'store_theme/content-paragraphs';
      break;

    // Oembed video Fancybox link field.
    case 'field_media_oembed_video':
      if ($variables['element']['#formatter'] == 'oembed_video_fancybox') {
        $variables['#attached']['library'][] = 'base/oembed-video-fancybox-link';
      }
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $field_name = $variables['element']['#field_name'];
  $view_mode = $variables['element']['#view_mode'];

  $suggestion_name = [
    'field',
    $variables['element']['#entity_type'],
    $variables['element']['#field_name'],
    $variables['element']['#view_mode'],
  ];

  // Clean layout fields.
  $clean_fields = [
    'name',
    'title',
    'field_media_image',
  ];
  if (in_array($field_name, $clean_fields)) {
    $suggestions[] = 'field__clean';
  }

  // Content blocks body field.
  if ($field_name === 'body') {
    if ($variables['element']['#entity_type'] === 'block_content') {
      $suggestions[] = 'field__clean';
    }
  }

  $suggestions[] = implode('__', $suggestion_name);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_responsive_image(&$variables) {
  if (!isset($variables['img_element']['#attributes']['loading'])) {
    $variables['img_element']['#attributes']['loading'] = 'lazy';
  }

  $responsive_style = ResponsiveImageStyle::load($variables['responsive_image_style_id']);
  if (!$responsive_style) {
    return;
  }

  $image_factory = \Drupal::service('image.factory');
  $fallback_style = ImageStyle::load($responsive_style->getFallbackImageStyle());

  if (!$fallback_style) {
    return;
  }

  $fallback_image = $fallback_style->buildUri($variables['uri']);
  $image_factory->get($fallback_image);
  $variables['img_element']['#attributes']['width'] = $image_factory->get($fallback_image)->getWidth();
  $variables['img_element']['#attributes']['height'] = $image_factory->get($fallback_image)->getHeight();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $view_mode = $variables['elements']['#view_mode'];
  $bundle = $node->bundle();
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();

  // E.g. 'news' => ['full', 'teaser'] expects 'news-full' and 'news-teaser' libraries.
  $libraries = [];

  foreach ($libraries as $bundle_id => $view_modes) {
    if ($bundle_id === $bundle) {
      if (in_array($view_mode, $view_modes)) {
        $library_name = implode('-', [
          $bundle, $view_mode,
        ]);
        $variables['#attached']['library'][] = implode('/', [
          $theme_name, $library_name,
        ]);
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function base_preprocess_menu_local_tasks(&$variables) {
  $variables['#attached']['library'][] = 'base/local-tasks';

  if (isset($variables['primary']['entity.node.delete_form'])) {
    $variables['primary']['entity.node.delete_form']['#weight'] = 101;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_breadcrumb(&$variables) {
  $variables['#attached']['library'][] = 'base/breadcrumbs';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  // Pager library.
  if ($view->getDisplay()->isPagerEnabled() && !empty($variables['rows'])) {
    $variables['#attached']['library'][] = 'base/pager';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_input(&$variables) {
  if (strpos($variables['element']['#name'], 'phone') !== FALSE) {
    $variables['#attached']['library'][] = 'base/masked-input';
  }
}
