<?php

/**
 * @file
 * Main file for Base theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;

/**
 * Implements hook_preprocess_html().
 */
function base_preprocess_html(&$variables) {
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['attributes']['class'][] = 'is-front';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_region(&$variables) {
  $variables['region'] = Html::cleanCssIdentifier($variables['region']);
}

/**
 * Implements hook_preprocess_page().
 */
function base_preprocess_page(&$variables) {
  $page = &$variables['page'];

  // Sidebar layout attributes.
  $layout_attributes = new Attribute();
  $layout_attributes->addClass('main-layout');
  $layout_attributes->addClass('container');


  if (!empty($variables['page']['sidebar'])) {
    $layout_attributes->addClass('main-layout--with-sidebar');
  }

  $variables['layout_attributes'] = $layout_attributes;
}

/**
 * Implements hook_preprocess_block().
 */
function base_preprocess_block(&$variables) {
  if (!isset($variables['elements']['#id'])) {
    return;
  }

  $variables['class'] = Html::cleanCssIdentifier($variables['elements']['#id']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements template_preprocess_field().
 */
function base_preprocess_field(&$variables) {
  $field_name = $variables['field_name'];
  $field_name_formatted = str_replace('field_', '', $field_name) . '-field';
  $variables['field_name'] = Html::cleanCssIdentifier($field_name_formatted);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $field_name = $variables['element']['#field_name'];
  $view_mode = $variables['element']['#view_mode'];

  $suggestion_name = [
    'field',
    $variables['element']['#entity_type'],
    $variables['element']['#field_name'],
    $variables['element']['#view_mode'],
  ];

  // Clean layout fields.
  $clean_fields = [];
  if (in_array($field_name, $clean_fields)) {
    $suggestions[] = 'field__clean';
  }

  // Content blocks body field.
  if ($field_name === 'body') {
    if ($variables['element']['#entity_type'] === 'block_content') {
      $suggestions[] = 'field__clean';
    }
  }

  $suggestions[] = implode('__', $suggestion_name);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_responsive_image(&$variables) {
  if (!isset($variables['img_element']['#attributes']['loading'])) {
    $variables['img_element']['#attributes']['loading'] = 'lazy';
  }

  $responsive_style = ResponsiveImageStyle::load($variables['responsive_image_style_id']);
  if (!$responsive_style) {
    return;
  }

  $image_factory = \Drupal::service('image.factory');
  $fallback_style = ImageStyle::load($responsive_style->getFallbackImageStyle());

  if (!$fallback_style) {
    return;
  }

  $fallback_image = $fallback_style->buildUri($variables['uri']);
  $image_factory->get($fallback_image);
  $variables['img_element']['#attributes']['width'] = $image_factory->get($fallback_image)->getWidth();
  $variables['img_element']['#attributes']['height'] = $image_factory->get($fallback_image)->getHeight();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $bundle = $node->bundle();
  $view_mode = $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function base_preprocess_menu_local_tasks(&$variables) {
  $variables['#attached']['library'][] = 'base/local-tasks';

  if (isset($variables['primary']['entity.node.delete_form'])) {
    $variables['primary']['entity.node.delete_form']['#weight'] = 101;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_breadcrumb(&$variables) {
  $variables['#attached']['library'][] = 'base/breadcrumbs';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  // Pager library.
  if ($view->getDisplay()->isPagerEnabled() && !empty($variables['rows'])) {
    $variables['#attached']['library'][] = 'base/pager';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_preprocess_input(&$variables) {
  if (strpos($variables['element']['#name'], 'phone') !== FALSE) {
    $variables['#attached']['library'][] = 'base/maskedinput';
  }
}